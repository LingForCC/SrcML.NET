/******************************************************************************
 * Copyright (c) 2013 ABB Group
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *  Patrick Francis (ABB Group) - initial API, implementation, & documentation
 *  Vinay Augustine (ABB Group) - initial API, implementation, & documentation
 *****************************************************************************/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;

namespace ABB.SrcML.Data {
    /// <summary>
    /// The data archive is an incrementally updating data container.
    /// </summary>
    /// <example>
    /// <code>
    /// var sourceFolder = new FileSystemSourceFolder("path to folder");
    /// var archive = new SrcMLArchive(sourceFolder);
    /// 
    /// // this should generate a data archive for the given srcML archive
    /// // when we start serializing data, we should consider how the location of the data can be stored in the srcmL archive
    /// // calling "DataArchive" on a srcML archive that already has data should transparently load the existing data
    /// DataArchive data = new DataArchive(archive);
    ///
    /// // testDeclaration is some declaration within archive
    /// var testDeclaration = new XElement(SRC.Declaration, "test data");
    /// 
    /// // The TypeUse object represents the context that the type is being used in
    /// TypeUse typeUseForDeclaration = new TypeUse(testDeclaration);
    /// TypeDefinition typeInfo = data.ResolveType(typeUseForDeclaration);
    /// 
    /// // one of the thing we should be able to do is get the original XML. Behind the scenes, this relies on using XPath queries
    /// // generated by Extensions.GetXPath()
    /// XElement typeXml = typeInfo.GetXElement();
    /// TypeUse parentType = typeInfo.ParentTypes.First();
    /// XElement parentXml = data.ResolveType(parentType).GetXElement();
    /// </code>
    /// </example>
    public class DataArchive {
        private Scope globalScope;
        private Dictionary<Language, AbstractCodeParser> parsers;

        /// <summary>
        /// The SrcMLArchive to extract the data from.
        /// </summary>
        public SrcMLArchive Archive { get; private set; }

        /// <summary>
        /// Create a data archive for the given srcML archive. It will subscribe to the <see cref="AbstractArchive.FileChanged"/> event.
        /// </summary>
        /// <param name="archive">The archive to monitor for changes.</param>
        public DataArchive(SrcMLArchive archive) {
            SetupParsers();
            this.Archive = archive;
            this.Archive.FileChanged += Archive_SourceFileChanged;
            InitializeData();
        }

        /// <summary>
        /// Removes any data from the archive.
        /// </summary>
        public void Clear() {
            globalScope = null;
            //TODO: clear any other data structures as necessary
        }

        /// <summary>
        /// Adds the given file to the data archive.
        /// </summary>
        /// <param name="sourceFile">The path of the file to add.</param>
        public void AddFile(string sourceFile) {
            var unit = Archive.GetXElementForSourceFile(sourceFile);
            AddFile(unit);
        }

        /// <summary>
        /// Adds the given file to the data archive.
        /// </summary>
        /// <param name="fileUnitElement">The <see cref="SRC.Unit"/> XElement for the file to add.</param>
        public void AddFile(XElement fileUnitElement) {
            var fileLanguage = SrcMLElement.GetLanguageForUnit(fileUnitElement);
            Scope resultScope = null;
            AbstractCodeParser parserForUnit;
            if(parsers.TryGetValue(fileLanguage, out parserForUnit)) {
                resultScope = parserForUnit.ParseFileUnit(fileUnitElement);
            }
            
            if(resultScope != null) {
                globalScope = globalScope != null ? globalScope.Merge(resultScope) : resultScope;
            }
            //TODO: update other data structures as necessary
        }

        /// <summary>
        /// Removes the given file from the data archive
        /// </summary>
        /// <param name="sourceFile">The path of the file to remove.</param>
        public void RemoveFile(string sourceFile) {
            globalScope.RemoveFile(sourceFile);
        }

        /// <summary>
        /// Finds the innermost scope that contains the given source location.
        /// </summary>
        /// <param name="loc">The source location to search for.</param>
        /// <returns>The innermost scope containing the location, or null if it is not found.</returns>
        public Scope FindScope(SourceLocation loc) {
            return globalScope.GetScopeForLocation(loc);
        }

        /// <summary>
        /// Finds the innermost scope that contains the given element.
        /// </summary>
        /// <param name="element">The element to search for.</param>
        /// <returns>The innermost scope containing the element, or null if it is not found.</returns>
        public Scope FindScope(XElement element) {
            return globalScope.GetScopeForPath(element.GetXPath());
        }

        /// <summary>
        /// Finds the innermost scope that contains the given XPath.
        /// </summary>
        /// <param name="xpath">The XPath to search for.</param>
        /// <returns>The innermost scope containing the XPath, or null if it is not found.</returns>
        public Scope FindScope(string xpath) {
            return globalScope.GetScopeForPath(xpath);
        }


        public AbstractUse<TUse> FindUse<TUse>(SourceLocation loc) where TUse : class {
            throw new NotImplementedException();
        }

        public AbstractUse<TUse> FindUse<TUse>(XElement element) where TUse : class {
            throw new NotImplementedException();
        }



        #region Private Methods
        private void InitializeData() {
            Clear();
            foreach(var unit in Archive.FileUnits) {
                AddFile(unit);
            }
        }

        private void SetupParsers() {
            parsers = new Dictionary<Language, AbstractCodeParser>() {
                { Language.CPlusPlus, new CPlusPlusCodeParser() },
                { Language.Java, new JavaCodeParser() },
                { Language.CSharp, new CSharpCodeParser() }
            };
        }

        private void Archive_SourceFileChanged(object sender, FileEventRaisedArgs e) {
            switch(e.EventType) {
                case FileEventType.FileChanged:
                    // Treat a changed source file as deleted then added
                    RemoveFile(e.FilePath);
                    goto case FileEventType.FileAdded;
                case FileEventType.FileAdded:
                    AddFile(e.FilePath);
                    break;
                case FileEventType.FileDeleted:
                    RemoveFile(e.FilePath);
                    break;
                case FileEventType.FileRenamed:
                    // TODO: could a more efficient rename action be supported within the data structures themselves?
                    RemoveFile(e.OldFilePath);
                    AddFile(e.FilePath);
                    break;
            }
        }

        #endregion

    }
}
